name: Release

on:
  workflow_dispatch:  # Manual trigger from GitHub UI
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        default: 'patch'
        options:
          - patch  # 2.1.7 → 2.1.8
          - minor  # 2.1.7 → 2.2.0
          - major  # 2.1.7 → 3.0.0
          - auto   # Let semantic-release decide (once all commits are conventional)
      dry_run:
        description: 'Dry run (no release, just preview)'
        required: false
        default: false
        type: boolean
      upload_to_play_store:
        description: 'Upload to Google Play Store'
        required: false
        default: false
        type: boolean
      play_store_track:
        description: 'Play Store release track'
        required: false
        type: choice
        default: 'internal'
        options:
          - internal    # Internal testing track (recommended for initial testing)
          - alpha       # Closed testing track
          - beta        # Open testing track
          - production  # Production release
      play_store_status:
        description: 'Play Store release status'
        required: false
        type: choice
        default: 'draft'
        options:
          - draft       # Create as draft, manual review needed
          - completed   # Complete the release immediately

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep "versionName = " app/build.gradle.kts | sed 's/.*"\(.*\)".*/\1/')
          CURRENT_CODE=$(grep "versionCode = " app/build.gradle.kts | sed 's/[^0-9]*//g')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "code=$CURRENT_CODE" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION (code: $CURRENT_CODE)"
      
      - name: Calculate next version
        id: next_version
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          BUMP_TYPE="${{ inputs.version_bump }}"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
          
          # Calculate next version based on bump type
          if [ "$BUMP_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$BUMP_TYPE" = "patch" ]; then
            PATCH=$((PATCH + 1))
          elif [ "$BUMP_TYPE" = "auto" ]; then
            # Auto mode: check commit messages
            echo "Auto mode: Analyzing commits since last tag..."
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            
            if [ -z "$LAST_TAG" ]; then
              echo "No previous tags found, defaulting to patch"
              PATCH=$((PATCH + 1))
            else
              # Check for breaking changes
              if git log $LAST_TAG..HEAD --grep="BREAKING CHANGE" --grep="!:" | grep -q .; then
                echo "Found breaking changes"
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
              # Check for features
              elif git log $LAST_TAG..HEAD --grep="^feat" --grep="^feature" | grep -q .; then
                echo "Found new features"
                MINOR=$((MINOR + 1))
                PATCH=0
              # Default to patch for fixes and other changes
              else
                echo "Found fixes/other changes"
                PATCH=$((PATCH + 1))
              fi
            fi
          fi
          
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          NEXT_CODE=$((${{ steps.current_version.outputs.code }} + 1))
          
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "code=$NEXT_CODE" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION (code: $NEXT_CODE)"
      
      - name: Check if tag already exists
        if: ${{ !inputs.dry_run }}
        run: |
          TAG_NAME="v${{ steps.next_version.outputs.version }}"
          
          # Check if tag exists locally
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "❌ Tag $TAG_NAME already exists locally"
            exit 1
          fi
          
          # Check if tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            echo "❌ Tag $TAG_NAME already exists on remote"
            exit 1
          fi
          
          echo "✅ Tag $TAG_NAME is available"
      
      - name: Generate changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          NEXT_VERSION="${{ steps.next_version.outputs.version }}"
          
          echo "# Release v$NEXT_VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            # Get commit messages and format them
            git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
          else
            echo "## Initial Release" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "First release of PennyWise" >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "---" >> RELEASE_NOTES.md
          echo "### Installation" >> RELEASE_NOTES.md
          echo "Download the APK below and install it on your Android device." >> RELEASE_NOTES.md
          
          # Output for summary
          cat RELEASE_NOTES.md
      
      - name: Update version in build.gradle.kts
        if: ${{ !inputs.dry_run }}
        run: |
          sed -i "s/versionName = \".*\"/versionName = \"${{ steps.next_version.outputs.version }}\"/" app/build.gradle.kts
          sed -i "s/versionCode = .*/versionCode = ${{ steps.next_version.outputs.code }}/" app/build.gradle.kts
          
          echo "Updated build.gradle.kts:"
          grep "version" app/build.gradle.kts
      
      - name: Decode Keystore
        if: ${{ !inputs.dry_run }}
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > app/release.keystore
          echo "✅ Release keystore created"
      
      - name: Build Release APKs
        if: ${{ !inputs.dry_run }}
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # Build standard flavor (for Play Store)
          if [ -f "app/release.keystore" ] && [ -n "$KEYSTORE_PASSWORD" ]; then
            echo "Building signed standard release APK..."
            ./gradlew assembleStandardRelease \
              -Pandroid.injected.signing.store.file=${{ github.workspace }}/app/release.keystore \
              -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
              -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
              -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          else
            echo "Building unsigned standard release APK..."
            ./gradlew assembleStandardRelease
          fi
          
          # Build F-Droid flavor (unsigned for IzzyOnDroid)
          echo "Building F-Droid release APK..."
          ./gradlew assembleFdroidRelease
      
      - name: Rename APKs
        if: ${{ !inputs.dry_run }}
        run: |
          VERSION="${{ steps.next_version.outputs.version }}"
          STANDARD_PATH="app/build/outputs/apk/standard/release"
          FDROID_PATH="app/build/outputs/apk/fdroid/release"
          
          # Rename universal APK (contains all architectures)
          if [ -f "$STANDARD_PATH/app-standard-universal-release.apk" ]; then
            mv "$STANDARD_PATH/app-standard-universal-release.apk" \
               "$STANDARD_PATH/PennyWise-v${VERSION}-universal.apk"
          elif [ -f "$STANDARD_PATH/app-standard-universal-release-unsigned.apk" ]; then
            mv "$STANDARD_PATH/app-standard-universal-release-unsigned.apk" \
               "$STANDARD_PATH/PennyWise-v${VERSION}-universal.apk"
          fi
          
          # Rename architecture-specific APKs
          for arch in armeabi-v7a arm64-v8a x86 x86_64; do
            if [ -f "$STANDARD_PATH/app-standard-${arch}-release.apk" ]; then
              mv "$STANDARD_PATH/app-standard-${arch}-release.apk" \
                 "$STANDARD_PATH/PennyWise-v${VERSION}-${arch}.apk"
            elif [ -f "$STANDARD_PATH/app-standard-${arch}-release-unsigned.apk" ]; then
              mv "$STANDARD_PATH/app-standard-${arch}-release-unsigned.apk" \
                 "$STANDARD_PATH/PennyWise-v${VERSION}-${arch}.apk"
            fi
          done
          
          # Rename F-Droid APK
          if [ -f "$FDROID_PATH/app-fdroid-release-unsigned.apk" ]; then
            mv "$FDROID_PATH/app-fdroid-release-unsigned.apk" \
               "$FDROID_PATH/PennyWise-fdroid-v${VERSION}.apk"
          fi
          
          echo "Standard APKs:"
          ls -la "$STANDARD_PATH/"
          echo "F-Droid APKs:"
          ls -la "$FDROID_PATH/"
      
      - name: Calculate SHA256
        if: ${{ !inputs.dry_run }}
        run: |
          VERSION="${{ steps.next_version.outputs.version }}"
          
          # SHA256 for all standard APKs
          cd app/build/outputs/apk/standard/release/
          for apk in PennyWise-v${VERSION}*.apk; do
            if [ -f "$apk" ]; then
              sha256sum "$apk" > "${apk}.sha256"
              echo "SHA256 for $apk:"
              cat "${apk}.sha256"
            fi
          done
          
          # SHA256 for F-Droid APK
          cd ../../fdroid/release/
          if [ -f "PennyWise-fdroid-v${VERSION}.apk" ]; then
            sha256sum "PennyWise-fdroid-v${VERSION}.apk" > "PennyWise-fdroid-v${VERSION}.apk.sha256"
            echo "F-Droid APK SHA256:"
            cat "PennyWise-fdroid-v${VERSION}.apk.sha256"
          fi
      
      - name: Commit version bump and push
        if: ${{ !inputs.dry_run }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit version bump
          git add app/build.gradle.kts
          git commit -m "chore(release): bump version to ${{ steps.next_version.outputs.version }} [skip ci]"
          
          # Pull latest changes and push commit
          git pull origin main --rebase
          git push origin main
      
      - name: Create and push tag
        if: ${{ !inputs.dry_run }}
        run: |
          # Create new tag at current commit
          git tag -a "v${{ steps.next_version.outputs.version }}" -m "Release v${{ steps.next_version.outputs.version }}"
          
          # Push the tag
          git push origin "v${{ steps.next_version.outputs.version }}"
      
      - name: Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.next_version.outputs.version }}
          name: Release v${{ steps.next_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: |
            app/build/outputs/apk/standard/release/PennyWise-v${{ steps.next_version.outputs.version }}-universal.apk
            app/build/outputs/apk/standard/release/PennyWise-v${{ steps.next_version.outputs.version }}-universal.apk.sha256
            app/build/outputs/apk/standard/release/PennyWise-v${{ steps.next_version.outputs.version }}-arm64-v8a.apk
            app/build/outputs/apk/standard/release/PennyWise-v${{ steps.next_version.outputs.version }}-arm64-v8a.apk.sha256
            app/build/outputs/apk/standard/release/PennyWise-v${{ steps.next_version.outputs.version }}-armeabi-v7a.apk
            app/build/outputs/apk/standard/release/PennyWise-v${{ steps.next_version.outputs.version }}-armeabi-v7a.apk.sha256
            app/build/outputs/apk/fdroid/release/PennyWise-fdroid-v${{ steps.next_version.outputs.version }}.apk
            app/build/outputs/apk/fdroid/release/PennyWise-fdroid-v${{ steps.next_version.outputs.version }}.apk.sha256
          draft: false
          prerelease: false
      
      - name: Dry Run Summary
        if: ${{ inputs.dry_run }}
        run: |
          echo "🔍 DRY RUN SUMMARY"
          echo "=================="
          echo "Current version: ${{ steps.current_version.outputs.version }}"
          echo "Next version: ${{ steps.next_version.outputs.version }}"
          echo "Version code: ${{ steps.next_version.outputs.code }}"
          echo "Bump type: ${{ inputs.version_bump }}"
          echo ""
          echo "📝 Release Notes:"
          cat RELEASE_NOTES.md
      
      - name: Build App Bundle for Play Store
        if: ${{ !inputs.dry_run && inputs.upload_to_play_store }}
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "Building signed App Bundle for Play Store..."
          ./gradlew bundleStandardRelease \
            -Pandroid.injected.signing.store.file=${{ github.workspace }}/app/release.keystore \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          
          # Rename AAB file
          AAB_PATH="app/build/outputs/bundle/standardRelease"
          mv "$AAB_PATH/app-standard-release.aab" \
             "$AAB_PATH/PennyWise-v${{ steps.next_version.outputs.version }}.aab"
          echo "App Bundle created: $AAB_PATH/PennyWise-v${{ steps.next_version.outputs.version }}.aab"
      
      - name: Upload to Play Store
        if: ${{ !inputs.dry_run && inputs.upload_to_play_store }}
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          packageName: com.pennywiseai.tracker
          releaseFiles: app/build/outputs/bundle/standardRelease/PennyWise-v${{ steps.next_version.outputs.version }}.aab
          track: ${{ inputs.play_store_track }}
          status: ${{ inputs.play_store_status }}
          releaseName: v${{ steps.next_version.outputs.version }}
          whatsNewDirectory: fastlane/metadata/android/en-US/changelogs/
          mappingFile: app/build/outputs/mapping/standardRelease/mapping.txt
      
      - name: Clean up keystore
        if: always()
        run: |
          rm -f app/release.keystore